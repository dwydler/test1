name: Test11.09 - Cleanup on Failure (Ubuntu)

on:
  workflow_call:
    inputs:
      ReleaseTag:
        required: true
        type: string
      HCloudObjectName:
        required: true
        type: string
        

jobs:
  Delete-NewBranch:
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate app token
        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2
        id: generate-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          
      - name: Delete previously created branch
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{ steps.generate-token.outputs.token }}
          branches: releases/${{ inputs.ReleaseTag }}


  Delete-HetznerRessources:
    runs-on: ubuntu-latest
    
    steps:
      - name: Install Hetzner Cloud Cli
        uses: hetznercloud/setup-hcloud@641015849308e9ed3e3b1f3d3b0a637068c5a2af # v1.0
        
      - name: Delete temporary SSH Key on Hetzner Cloud
        run: |
          sshkey_id=$(hcloud ssh-key list --output "columns=ID" --output "noheader" -l "server=$HCLOUD_NAME")

          if [ ! -z "$sshkey_id" ]; then
            hcloud ssh-key delete $sshkey_id
            echo "The ssh key was succcessfully deleted."
          fi
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
          HCLOUD_NAME: ${{ inputs.HCloudObjectName }}

      - name: Delete Server on Hetzner Cloud
        run: |
          server_id=$(hcloud server list --output "columns=ID" --output "noheader" -l "server=$HCLOUD_NAME")

          if [ ! -z "$server_id" ]; then
            hcloud server delete $server_id
            echo "The server was succcessfully deleted."
          else 
            echo "No server found with the given label."
          fi
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
          HCLOUD_NAME: ${{ inputs.HCloudObjectName }}

      - name: Delete Snapshot on Hetzner Cloud
        run: |
          snapshot_id=$(hcloud image list --output "columns=ID" --output "noheader" --type "snapshot" -l "server=$HCLOUD_NAME")

          if [ ! -z "$snapshot_id" ]; then
            hcloud snapshot delete $snapshot_id
            echo "The snapshot was succcessfully deleted."
          else 
            echo "No snapshot found with the given label."
          fi
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
          HCLOUD_NAME: ${{ inputs.HCloudObjectName }}
